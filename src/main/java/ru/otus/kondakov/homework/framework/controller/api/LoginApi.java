/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package ru.otus.kondakov.homework.framework.controller.api;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.servlet.http.HttpServletRequest;
import jakarta.validation.Valid;
import java.util.Optional;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.context.request.NativeWebRequest;
import ru.otus.kondakov.homework.framework.controller.model.LoginPost200Response;
import ru.otus.kondakov.homework.framework.controller.model.LoginPostRequest;

@Validated
@Tag(name = "login", description = "the login API")
public interface LoginApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * POST /login
     * Упрощенный процесс аутентификации путем передачи идентификатор пользователя и получения токена для дальнейшего прохождения авторизации
     *
     * @param loginPostRequest  (optional)
     * @return Успешная аутентификация (status code 200)
     */
    @Operation(
        operationId = "loginPost",
        description = "Упрощенный процесс аутентификации путем передачи идентификатор пользователя и получения токена для дальнейшего прохождения авторизации",
        responses = {
            @ApiResponse(responseCode = "200", description = "Успешная аутентификация", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = LoginPost200Response.class))
            })
        }
    )
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/login",
        produces = {"application/json"},
        consumes = {"application/json"}
    )
    ResponseEntity<LoginPost200Response> loginPost(
        @Parameter(name = "LoginPostRequest", description = "") @Valid @RequestBody(required = false) LoginPostRequest loginPostRequest
    );

    @GetMapping("/token/refresh")
    RefreshTokenResponse refreshToken(HttpServletRequest request);

    ;

    record RefreshTokenResponse(String access_jwt_token, String refresh_jwt_token) {
    }
}
